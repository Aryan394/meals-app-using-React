[{"/Users/aryan/Desktop/mealsApp/my-meals-app/src/index.jsx":"1","/Users/aryan/Desktop/mealsApp/my-meals-app/src/App.jsx":"2","/Users/aryan/Desktop/mealsApp/my-meals-app/src/context.jsx":"3","/Users/aryan/Desktop/mealsApp/my-meals-app/src/components/Favorites.jsx":"4","/Users/aryan/Desktop/mealsApp/my-meals-app/src/components/Search.jsx":"5","/Users/aryan/Desktop/mealsApp/my-meals-app/src/components/Modal.jsx":"6","/Users/aryan/Desktop/mealsApp/my-meals-app/src/components/Meals.jsx":"7"},{"size":281,"mtime":1680370672000,"results":"8","hashOfConfig":"9"},{"size":439,"mtime":1680617967000,"results":"10","hashOfConfig":"9"},{"size":2770,"mtime":1680627225519,"results":"11","hashOfConfig":"9"},{"size":757,"mtime":1680617968000,"results":"12","hashOfConfig":"9"},{"size":911,"mtime":1680555402000,"results":"13","hashOfConfig":"9"},{"size":768,"mtime":1680608519000,"results":"14","hashOfConfig":"9"},{"size":886,"mtime":1680617969000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"186oub7",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/aryan/Desktop/mealsApp/my-meals-app/src/index.jsx",[],[],"/Users/aryan/Desktop/mealsApp/my-meals-app/src/App.jsx",[],[],"/Users/aryan/Desktop/mealsApp/my-meals-app/src/context.jsx",["41"],[],"import React, { useContext, useEffect, useState} from 'react';\n\nimport axios from 'axios';\nconst AppContext = React.createContext()\n\nconst allMealsUrl = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\nconst randomMealURL = \"https://www.themealdb.com/api/json/v1/1/random.php\";\nconst getFavoritesFromLocalStorage=()=>{\n  let favorites = localStorage.getItem('favorites');\n  if(favorites){\n    favorites = JSON.parse(localStorage.getItem('favorites'));\n  }\n  else{\n    favorites = [];\n  }\n  return favorites;\n}\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(false); \n  const [meals, setMeals] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [selectedMeal, setSelectedMeal] = useState(null);\n  const [favorites, setFavorites] = useState(getFavoritesFromLocalStorage());\n  \n  const fetchMeals = async(url)=>{\n    setLoading(true);\n      try{\n        const {data} = await axios(url);\n        setMeals(data.meals);      \n      }\n      catch(err){\n        console.log(err.response);\n      }\n    setLoading(false); \n    }\n\n  const fetchRandomMeal=()=>{\n    fetchMeals(randomMealURL);\n  }\n  const selectMeal=(idMeal, favouriteMeal) =>{\n    // console.log(console.log(idMeal));\n    let meal;\n    if(favouriteMeal){\n      meal = favorites.find((meal)=>meal.idMeal === idMeal);\n    }    \n    else{\n      meal = meals.find((meal)=>meal.idMeal === idMeal);\n    }\n    setSelectedMeal(meal);\n    setShowModal(true);\n  }\n  const closeModal= ()=>{\n    setShowModal(false);\n    \n  }\n  const addToFavorites= (idMeal)=>{\n    // console.log(idMeal);\n    const meal = meals.find((meal)=>meal.idMeal === idMeal);\n    const alreadyFavorite = favorites.find((meal)=>meal.idMeal === idMeal);\n    if(alreadyFavorite) return;\n    const updatedFavorites = [...favorites, meal];\n    setFavorites(updatedFavorites);\n    // console.log(favorites);\n    localStorage.setItem(\"favorites\", JSON.stringify(updatedFavorites));\n    \n  }\n  const removeFromFavorites= (idMeal)=>{\n    const updatedFavorites = favorites.filter((meal)=> meal.idMeal!== idMeal);\n    setFavorites(updatedFavorites);\n    localStorage.setItem(\"favorites\", JSON.stringify(updatedFavorites));\n  }\n  useEffect(() => {\n    if(!searchTerm) return;\n    fetchMeals(allMealsUrl);\n  }, [])\n  useEffect(() => {\n    fetchMeals(allMealsUrl+searchTerm);\n  }, [searchTerm])\n  return <AppContext.Provider value={{loading, meals, setSearchTerm, fetchRandomMeal, showModal, selectedMeal, selectMeal, closeModal, addToFavorites, removeFromFavorites, favorites}}>\n    {children}\n  </AppContext.Provider>\n}\n\n\nconst useGlobalContext = () => {\n  return useContext(AppContext);\n}\n\nexport { AppContext, AppProvider, useGlobalContext };","/Users/aryan/Desktop/mealsApp/my-meals-app/src/components/Favorites.jsx",["42"],[],"import {useGlobalContext} from '../context';\nconst Favorites = () =>{\n  const {favorites, selectMeal, removeFromFavorites} = useGlobalContext();\n  return( <section className = 'favorites'>\n    <div className = 'favorites-content'>\n      <h5>Favourites</h5>\n      <div className = 'favorites-container'>\n        {favorites.map((item) => {\n          const {idMeal, strMealThumb:image} = item;\n          return <div key = {idMeal} className = \"favorite-item\">\n          <img src ={image} className = \"favorites-img img\" onClick={()=>selectMeal(idMeal, true)}/>\n            <button className = \"remove-btn\" onClick = {()=>removeFromFavorites(idMeal)}>Remove</button>\n          </div>\n        })}\n      </div>\n    </div>\n  </section>)\n}\nexport default Favorites;","/Users/aryan/Desktop/mealsApp/my-meals-app/src/components/Search.jsx",[],[],"/Users/aryan/Desktop/mealsApp/my-meals-app/src/components/Modal.jsx",["43"],[],"import { useGlobalContext } from \"../context\";\n\n\nconst Modals = () =>{\n  const {selectedMeal, closeModal} = useGlobalContext();\n  const {strMealThumb:image, strMeal: title, strInstructions: text, strSource: source} = selectedMeal\n  return <aside className=\"modal-overlay\">\n    <div className=\"modal-container\">\n{/*       <h1>{selectedMeal.strMeal}</h1> */}\n      <img src = {image} alt = {title} className = {\"img modal-img\"}/>\n      <div className = \"modal-content\">\n        <h4>{title}</h4>\n        <p>Cooking Instructions</p>\n        <p>{text}</p>\n        <a href = {source} target = \"_blank\">Original Source</a>\n        <button className = \"btn btn-hipster close-btn\" onClick= {closeModal}>close</button>\n      </div>\n    </div>\n  </aside>\n}\nexport default Modals;","/Users/aryan/Desktop/mealsApp/my-meals-app/src/components/Meals.jsx",["44"],[],"\nimport {useGlobalContext} from '../context';\nimport {BsFillBookmarkHeartFill} from 'react-icons/bs';\nconst Meals = () =>{\n  const {meals, loading, selectMeal, addToFavorites} = useGlobalContext()\n  // console.log(context);\n\n  if(loading){\n    return <section className='section'>\n       <h4>Loading...</h4>\n    </section>\n  }\n  \n  return(<section className='section-center'>\n    {meals.map((singleMeal)=>{\n    const {idMeal, strMeal: title, strMealThumb: image} = singleMeal;\n     \n    // console.log(singleMeal);\n    return <article key={idMeal} className = 'single-meal'>\n      <img src = {image} className = 'img' onClick ={()=> selectMeal(idMeal)}/>\n      <footer>\n        <h5>{title}</h5>\n        <button className = \"like-btn\" onClick = {()=>addToFavorites(idMeal)}><BsFillBookmarkHeartFill/></button>\n      </footer>\n    </article>\n    })}\n  </section>) \n}\nexport default Meals;",{"ruleId":"45","severity":1,"message":"46","line":76,"column":6,"nodeType":"47","endLine":76,"endColumn":8,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":11,"column":11,"nodeType":"51","endLine":11,"endColumn":101},{"ruleId":"52","severity":1,"message":"53","line":15,"column":9,"nodeType":"51","messageId":"54","endLine":15,"endColumn":46,"fix":"55"},{"ruleId":"49","severity":1,"message":"50","line":20,"column":7,"nodeType":"51","endLine":20,"endColumn":80},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchTerm'. Either include it or remove the dependency array.","ArrayExpression",["56"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"57","text":"58"},{"desc":"59","fix":"60"},[595,595]," rel=\"noreferrer\"","Update the dependencies array to be: [searchTerm]",{"range":"61","text":"62"},[2336,2338],"[searchTerm]"]